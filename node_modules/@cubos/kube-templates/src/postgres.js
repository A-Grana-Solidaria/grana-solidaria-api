"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Postgres = void 0;
var crypto_1 = require("crypto");
var helpers_1 = require("./helpers");
var kubernetes_1 = require("./kubernetes");
var Postgres = /** @class */ (function () {
    function Postgres(metadata, spec) {
        this.metadata = metadata;
        this.spec = spec;
    }
    Object.defineProperty(Postgres.prototype, "yaml", {
        get: function () {
            var _a, _b;
            var _this = this;
            var _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
            var _s, _t;
            var additionalContainers = [];
            var commonReplicationOptions = this.spec.readReplicas
                ? {
                    walLevel: "replica",
                    maxWalSenders: 20,
                    walKeepSegments: 16,
                }
                : {};
            var masterReplicationOptions = this.spec.readReplicas
                ? {
                    listenAddresses: "*",
                    maxReplicationSlots: 20,
                }
                : {};
            var replicationCredentials = {
                user: "replicator",
                pass: (_c = this.spec.replicaPassword) !== null && _c !== void 0 ? _c : crypto_1.createHash("sha256")
                    .update(JSON.stringify(this.metadata))
                    .digest("hex"),
            };
            var replicaReplicationOptions = this.spec.readReplicas
                ? {
                    primaryConninfo: "host=" + this.metadata.name + " port=5432 user=" + replicationCredentials.user + " password=" + replicationCredentials.pass,
                    hotStandby: "on",
                }
                : {};
            var mem = helpers_1.parseMemory(this.spec.memory);
            var MB = 1024 * 1024;
            var GB = 1024 * MB;
            if (((_d = this.spec.monitoring) === null || _d === void 0 ? void 0 : _d.type) === "pgAnalyze") {
                (_e = (_s = this.spec).options) !== null && _e !== void 0 ? _e : (_s.options = {});
                this.spec.options.sharedPreloadLibraries = this.spec.options.sharedPreloadLibraries ? this.spec.options.sharedPreloadLibraries + ",pg_stat_statements" : "pg_stat_statements";
                this.spec.options.trackActivityQuerySize = 2048;
                this.spec.options["pgStatStatements.track"] = "all";
                (_f = (_t = this.spec).users) !== null && _f !== void 0 ? _f : (_t.users = []);
                this.spec.users.push({
                    username: "pganalyze",
                    password: "pganalyze",
                });
                additionalContainers.push.apply(additionalContainers, (_a = ((_g = this.spec.databases) !== null && _g !== void 0 ? _g : [])
                    .map(function (databaseOrName) { return (typeof databaseOrName === "string" ? { name: databaseOrName } : databaseOrName); }))
                    .concat.apply(_a, (this.spec.monitoring.monitorPostgresDatabase ? [{ name: "postgres" }] : [])).map(function (database) { return ({
                    name: "pganalyze-" + database.name,
                    image: "quay.io/pganalyze/collector:v0.33.1",
                    command: ["/usr/local/bin/gosu"],
                    args: [
                        "pganalyze",
                        "/home/pganalyze/collector",
                        "--statefile=/state/pganalyze-collector.state",
                        "--no-log-timestamps",
                        "--no-logs",
                        "--no-system-information",
                    ],
                    env: [
                        {
                            name: "PGA_API_KEY",
                            value: _this.spec.monitoring.apiKey,
                        },
                        {
                            name: "DB_HOST",
                            value: _this.metadata.name,
                        },
                        {
                            name: "DB_NAME",
                            value: database.name,
                        },
                        {
                            name: "DB_USERNAME",
                            value: "pganalyze",
                        },
                        {
                            name: "DB_PASSWORD",
                            value: "pganalyze",
                        },
                    ],
                    resources: {
                        limits: {
                            cpu: "200m",
                            memory: "50Mi",
                        },
                        requests: {
                            cpu: "10m",
                            memory: "50Mi",
                        },
                    },
                }); }));
            }
            var options = __assign(__assign(__assign({ maxConnections: Math.max(100, mem / (8 * MB)), sharedBuffers: Math.ceil((mem * (mem > 1 * GB ? 0.25 : 0.15)) / MB) + "MB", effectiveCacheSize: Math.ceil(mem / 2 / MB) + "MB" }, masterReplicationOptions), commonReplicationOptions), ((_h = this.spec.options) !== null && _h !== void 0 ? _h : {}));
            var loggingConfigs = {
                logTruncateOnRotation: "on",
                logRotationAge: "1d",
                logFilename: "postgresql-%a.log",
                logRotationSize: 0,
                loggingCollector: "on",
                logDirectory: "/var/lib/postgresql/log",
            };
            var replicaOptions = __assign(__assign(__assign(__assign({ maxConnections: Math.max(100, helpers_1.parseMemory(this.spec.memory) / (8 * 1024 * 1024)) }, replicaReplicationOptions), commonReplicationOptions), ((_j = this.spec.options) !== null && _j !== void 0 ? _j : {})), loggingConfigs);
            var users = __spreadArrays((this.spec.readReplicas
                ? [
                    {
                        username: replicationCredentials.user,
                        password: replicationCredentials.pass,
                    },
                ]
                : []), ((_k = this.spec.users) !== null && _k !== void 0 ? _k : []));
            var replicaStringOptions = Object.entries(replicaOptions)
                .map(function (_a) {
                var key = _a[0], value = _a[1];
                return [
                    "-c",
                    key.replace(/[A-Z]/g, function (x) { return "_" + x.toLowerCase(); }) + "=" +
                        ("'" + (value === true
                            ? "yes"
                            : value === false
                                ? "no"
                                : value === null || value === void 0 ? void 0 : value.toString().replace(/'/g, "'\"'\"'")) + "'"),
                ];
            })
                .reduce(function (a, b) { return __spreadArrays(a, b); }, [])
                .join(" ");
            return helpers_1.generateYaml(__spreadArrays([
                new kubernetes_1.Service(this.metadata, {
                    selector: {
                        app: this.metadata.name,
                    },
                    ports: [
                        {
                            name: "postgres",
                            port: 5432,
                        },
                    ],
                }),
                new kubernetes_1.StatefulSet(this.metadata, {
                    serviceName: this.metadata.name,
                    replicas: 1,
                    selector: {
                        matchLabels: {
                            app: this.metadata.name,
                        },
                    },
                    template: {
                        metadata: {
                            labels: {
                                app: this.metadata.name,
                            },
                        },
                        spec: {
                            initContainers: this.spec.readReplicas
                                ? __spreadArrays([
                                    {
                                        name: "pg-init",
                                        image: "postgres:" + this.spec.version + "-alpine",
                                        imagePullPolicy: "Always",
                                        env: [
                                            __assign({ name: "POSTGRES_PASSWORD" }, (this.spec.postgresUserPassword
                                                ? typeof this.spec.postgresUserPassword === "object"
                                                    ? {
                                                        valueFrom: {
                                                            secretKeyRef: {
                                                                name: this.spec.postgresUserPassword
                                                                    .secretName,
                                                                key: this.spec.postgresUserPassword.key,
                                                            },
                                                        },
                                                    }
                                                    : {
                                                        value: "" + this.spec.postgresUserPassword,
                                                    }
                                                : {
                                                    value: "postgres",
                                                })),
                                        ],
                                        command: [
                                            "/bin/bash",
                                            "-ec",
                                            "\n                        echo Configuring Master...\n\n                        sed -i -r -e \"s/^postgres:(.*):\\/sbin\\/nologin$/postgres:\\1:\\/bin\\/sh/\" /etc/passwd\n\n                        echo Check if directory is empty...\n                        if [ ! -f /var/lib/postgresql/data/postgresql.conf ]; then\n                            echo Directory is empty. Initializing database...\n                            chown postgres:postgres /var/lib/postgresql/data\n                            su postgres -c \"initdb -D /var/lib/postgresql/data\"\n                        fi\n\n                        echo Adding replication user to pg_hba...\n                        echo \"host replication " + replicationCredentials.user + " 0.0.0.0/0 trust\" >> /var/lib/postgresql/data/pg_hba.conf\n\n                        echo Done.\n                      ",
                                        ],
                                        resources: {
                                            limits: {
                                                cpu: "100m",
                                                memory: "128Mi",
                                            },
                                            requests: {
                                                cpu: 0,
                                                memory: "128Mi",
                                            },
                                        },
                                        volumeMounts: [
                                            {
                                                mountPath: "/var/lib/postgresql/data",
                                                name: "data",
                                                subPath: "data",
                                            },
                                            {
                                                mountPath: "/dev/shm",
                                                name: "shm",
                                            },
                                        ],
                                    }
                                ], ((_l = this.spec.initContainers) !== null && _l !== void 0 ? _l : [])) : this.spec.initContainers,
                            automountServiceAccountToken: false,
                            containers: __spreadArrays([
                                {
                                    name: "postgres",
                                    image: "postgres:" + this.spec.version + "-alpine",
                                    args: __spreadArrays([
                                        "postgres"
                                    ], Object.entries(options)
                                        .map(function (_a) {
                                        var key = _a[0], value = _a[1];
                                        return [
                                            "-c",
                                            key.replace(/[A-Z]/g, function (x) { return "_" + x.toLowerCase(); }) + "=" +
                                                ("" + (value === true
                                                    ? "yes"
                                                    : value === false
                                                        ? "no"
                                                        : value)),
                                        ];
                                    })
                                        .reduce(function (a, b) { return __spreadArrays(a, b); }, [])),
                                    env: [
                                        __assign({ name: "POSTGRES_PASSWORD" }, (this.spec.postgresUserPassword
                                            ? typeof this.spec.postgresUserPassword === "object"
                                                ? {
                                                    valueFrom: {
                                                        secretKeyRef: {
                                                            name: this.spec.postgresUserPassword.secretName,
                                                            key: this.spec.postgresUserPassword.key,
                                                        },
                                                    },
                                                }
                                                : {
                                                    value: "" + this.spec.postgresUserPassword,
                                                }
                                            : {
                                                value: "postgres",
                                            })),
                                    ],
                                    imagePullPolicy: "Always",
                                    ports: [
                                        {
                                            name: "postgres",
                                            containerPort: 5432,
                                        },
                                    ],
                                    volumeMounts: [
                                        {
                                            mountPath: "/var/lib/postgresql/data",
                                            name: "data",
                                            subPath: "data",
                                        },
                                        {
                                            mountPath: "/dev/shm",
                                            name: "shm",
                                        },
                                    ],
                                    resources: {
                                        limits: {
                                            cpu: this.spec.cpu.limit,
                                            memory: this.spec.memory,
                                        },
                                        requests: {
                                            cpu: this.spec.cpu.request,
                                            memory: this.spec.memory,
                                        },
                                    },
                                    readinessProbe: {
                                        exec: {
                                            command: [
                                                "psql",
                                                "-h",
                                                "127.0.0.1",
                                                "-U",
                                                "postgres",
                                                "-c",
                                                "SELECT 1",
                                            ],
                                        },
                                        failureThreshold: 1,
                                        periodSeconds: 3,
                                    },
                                    livenessProbe: {
                                        exec: {
                                            command: [
                                                "psql",
                                                "-h",
                                                "127.0.0.1",
                                                "-U",
                                                "postgres",
                                                "-c",
                                                "SELECT 1",
                                            ],
                                        },
                                        failureThreshold: 2,
                                        periodSeconds: 5,
                                        initialDelaySeconds: 10,
                                    },
                                },
                                {
                                    name: "setup",
                                    image: "postgres:" + this.spec.version + "-alpine",
                                    imagePullPolicy: "Always",
                                    env: [
                                        __assign({ name: "POSTGRES_PASSWORD" }, (this.spec.postgresUserPassword
                                            ? typeof this.spec.postgresUserPassword === "object"
                                                ? {
                                                    valueFrom: {
                                                        secretKeyRef: {
                                                            name: this.spec.postgresUserPassword.secretName,
                                                            key: this.spec.postgresUserPassword.key,
                                                        },
                                                    },
                                                }
                                                : {
                                                    value: "" + this.spec.postgresUserPassword,
                                                }
                                            : {
                                                value: "postgres",
                                            })),
                                    ],
                                    command: [
                                        "/bin/bash",
                                        "-ec",
                                        "\n                  echo Wait for Postgres to be ready.\n                  until psql -h 127.0.0.1 -U postgres -c 'SELECT 1'\n                  do\n                    echo Not ready yet. Trying again...\n                    sleep 1\n                  done\n                  echo Postgres is ready.\n\n                  function keep_alive {\n                    trap 'echo Graceful shutdown; exit 0' SIGTERM\n                    while :\n                    do\n                      sleep 999d &\n                      wait $!\n                    done\n                  }\n\n                  READ_ONLY=$(psql -h 127.0.0.1 -U postgres -qt -c 'SELECT pg_is_in_recovery()' | xargs)\n                  if [ \"$READ_ONLY\" = \"t\" ]; then\n                    echo Database is in read only mode\n                    echo Setup will not execute\n                    touch /ready\n                    keep_alive\n                  fi\n\n                  echo Setting password for user postgres\n                  psql -h 127.0.0.1 -U postgres -c \"ALTER USER postgres ENCRYPTED PASSWORD '$POSTGRES_PASSWORD'\"\n\n                  USERS=$(psql -h 127.0.0.1 -U postgres -c \"SELECT usename FROM pg_user WHERE NOT usesuper AND usename != 'pganalyze'\" | tail -n+3 | sed '$d' | sed '$d')\n                  DATABASES=$(psql -h 127.0.0.1 -U postgres -c 'SELECT datname FROM pg_database WHERE NOT datistemplate' | tail -n+3 | sed '$d' | sed '$d')\n                  for user in $USERS\n                  do\n                    for database in $DATABASES\n                    do\n                      echo Revoke $user on $database\n                      psql -h 127.0.0.1 -U postgres -c \"REASSIGN OWNED BY $user TO postgres\" $database\n                      psql -h 127.0.0.1 -U postgres -c \"REVOKE ALL PRIVILEGES ON DATABASE $database FROM $user\"\n                      psql -h 127.0.0.1 -U postgres -c \"REVOKE ALL PRIVILEGES ON ALL TABLES IN SCHEMA public FROM $user\" $database\n                    done\n\n                    " + 
                                        // Only drop users that should not exist
                                        (users !== null && users !== void 0 ? users : [])
                                            .map(function (user) { return "\n                          [ \"$user\" == '" + user.username + "' ] && continue\n                        "; })
                                            .join("\n") + "\n\n                    echo Dropping user $user\n                    psql -h 127.0.0.1 -U postgres -c \"DROP USER $user\"\n                  done\n\n                  " + (users !== null && users !== void 0 ? users : [])
                                            .map(function (user) { return "\n                        echo Creating user " + user.username + "...\n                        psql -h 127.0.0.1 -U postgres -c \"CREATE USER \"'\"" + user.username + "\"'\" " + (_this.spec.readReplicas &&
                                            user.username === replicationCredentials.user
                                            ? "REPLICATION "
                                            : "") + "ENCRYPTED PASSWORD '\"'" + user.password + "'\"'\" || true\n                        psql -h 127.0.0.1 -U postgres -c \"ALTER USER \"'\"" + user.username + "\"'\"" + (_this.spec.readReplicas &&
                                            user.username === replicationCredentials.user
                                            ? "REPLICATION "
                                            : "") + " ENCRYPTED PASSWORD '\"'" + user.password + "'\"'\"\n                      "; })
                                            .join("\n") + "\n\n                  " + ((_m = this.spec.databases) !== null && _m !== void 0 ? _m : [])
                                            .map(function (databaseOrName) {
                                            return typeof databaseOrName === "string"
                                                ? { name: databaseOrName }
                                                : databaseOrName;
                                        })
                                            .map(function (database) {
                                            var _a;
                                            return "\n                        echo Creating database " + database.name + "...\n                        psql -h 127.0.0.1 -U postgres -c 'CREATE DATABASE \"" + database.name + "\"' || true\n\n                        " + ((_a = database.users) !== null && _a !== void 0 ? _a : [])
                                                .map(function (user) { return "\n                              echo Granting privileges on database " + database.name + " to user " + user + "...\n                              psql -h 127.0.0.1 -U postgres -c 'GRANT ALL PRIVILEGES ON DATABASE \"" + database.name + "\" TO \"" + user + "\"'\n                              psql -h 127.0.0.1 -U postgres -c 'GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO \"" + user + "\"' " + database.name + "\n                              psql -h 127.0.0.1 -U postgres -c 'GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO \"" + user + "\"' " + database.name + "\n                            "; })
                                                .join("\n") + "\n                      ";
                                        })
                                            .join("\n") + "\n\n                  " + (((_o = this.spec.monitoring) === null || _o === void 0 ? void 0 : _o.type) === "pgAnalyze" ? (_b = ((_p = this.spec.databases) !== null && _p !== void 0 ? _p : [])
                                            .map(function (databaseOrName) {
                                            return typeof databaseOrName === "string"
                                                ? { name: databaseOrName }
                                                : databaseOrName;
                                        }))
                                            .concat.apply(_b, (this.spec.monitoring.monitorPostgresDatabase ? [{ name: "postgres" }] : [])).map(function (database) { return "\n                        echo Setting up PgAnalyze on database " + database.name + "...\n                        psql -h 127.0.0.1 -U postgres -c 'CREATE EXTENSION IF NOT EXISTS pg_stat_statements WITH SCHEMA public;' " + database.name + "\n                        psql -h 127.0.0.1 -U postgres -c 'CREATE SCHEMA IF NOT EXISTS pganalyze;' " + database.name + "\n                        echo -e \"CREATE OR REPLACE FUNCTION pganalyze.get_stat_statements(showtext boolean = true) RETURNS SETOF pg_stat_statements AS\\n\\$\\$\\n/* pganalyze-collector */ SELECT * FROM public.pg_stat_statements(showtext);\\n\\$\\$ LANGUAGE sql VOLATILE SECURITY DEFINER;\" | psql -h 127.0.0.1 -U postgres " + database.name + "\n                        echo -e \"CREATE OR REPLACE FUNCTION pganalyze.get_stat_activity() RETURNS SETOF pg_stat_activity AS\\n\\$\\$\\n  /* pganalyze-collector */ SELECT * FROM pg_catalog.pg_stat_activity;\\n\\$\\$ LANGUAGE sql VOLATILE SECURITY DEFINER;\" | psql -h 127.0.0.1 -U postgres " + database.name + "\n                        echo -e \"CREATE OR REPLACE FUNCTION pganalyze.get_column_stats() RETURNS SETOF pg_stats AS\\n\\$\\$\\n  /* pganalyze-collector */ SELECT schemaname, tablename, attname, inherited, null_frac, avg_width,\\n  n_distinct, NULL::anyarray, most_common_freqs, NULL::anyarray, correlation, NULL::anyarray,\\n  most_common_elem_freqs, elem_count_histogram\\n  FROM pg_catalog.pg_stats;\\n\\$\\$ LANGUAGE sql VOLATILE SECURITY DEFINER;\" | psql -h 127.0.0.1 -U postgres " + database.name + "\n                        echo -e \"CREATE OR REPLACE FUNCTION pganalyze.get_stat_replication() RETURNS SETOF pg_stat_replication AS\\n\\$\\$\\n  /* pganalyze-collector */ SELECT * FROM pg_catalog.pg_stat_replication;\\n\\$\\$ LANGUAGE sql VOLATILE SECURITY DEFINER;\" | psql -h 127.0.0.1 -U postgres " + database.name + "\n                        psql -h 127.0.0.1 -U postgres -c \"REVOKE ALL ON SCHEMA public FROM pganalyze;\" " + database.name + "\n                        psql -h 127.0.0.1 -U postgres -c \"GRANT USAGE ON SCHEMA pganalyze TO pganalyze;\" " + database.name + "\n                      "; })
                                            .join("\n") : "") + "\n\n                  echo Done.\n                  touch /ready\n                  keep_alive\n                ",
                                    ],
                                    resources: {
                                        limits: {
                                            cpu: "100m",
                                            memory: "20Mi",
                                        },
                                        requests: {
                                            cpu: 0,
                                            memory: "20Mi",
                                        },
                                    },
                                    readinessProbe: {
                                        exec: {
                                            command: ["cat", "/ready"],
                                        },
                                        failureThreshold: 1,
                                        periodSeconds: 3,
                                    },
                                }
                            ], additionalContainers),
                            volumes: [
                                {
                                    name: "shm",
                                    emptyDir: {
                                        medium: "Memory",
                                    },
                                },
                            ],
                        },
                    },
                    volumeClaimTemplates: [
                        {
                            metadata: {
                                name: "data",
                            },
                            spec: {
                                accessModes: ["ReadWriteOnce"],
                                resources: {
                                    requests: {
                                        storage: "2Gi",
                                    },
                                },
                                storageClassName: (_q = this.spec.storageClassName) !== null && _q !== void 0 ? _q : (process.env.PRODUCTION ? "ssd-regional" : "ssd"),
                            },
                        },
                    ],
                })
            ], (this.spec.readReplicas
                ? [
                    new kubernetes_1.Service(__assign(__assign({}, this.metadata), { name: this.metadata.name + "-replica" }), {
                        selector: {
                            app: this.metadata.name + "-replica",
                        },
                        ports: [
                            {
                                name: "pg-replica",
                                port: 5432,
                            },
                        ],
                    }),
                    new kubernetes_1.StatefulSet(__assign(__assign({}, this.metadata), { name: this.metadata.name + "-replica" }), {
                        serviceName: this.metadata.name + "-replica",
                        replicas: this.spec.readReplicas,
                        selector: {
                            matchLabels: {
                                app: this.metadata.name + "-replica",
                            },
                        },
                        template: {
                            metadata: {
                                labels: {
                                    app: this.metadata.name + "-replica",
                                },
                            },
                            spec: {
                                initContainers: this.spec.initContainers,
                                automountServiceAccountToken: false,
                                containers: [
                                    {
                                        name: "pg-replica",
                                        image: "postgres:" + this.spec.version + "-alpine",
                                        env: [
                                            __assign({ name: "POSTGRES_PASSWORD" }, (this.spec.postgresUserPassword
                                                ? typeof this.spec.postgresUserPassword ===
                                                    "object"
                                                    ? {
                                                        valueFrom: {
                                                            secretKeyRef: {
                                                                name: this.spec.postgresUserPassword
                                                                    .secretName,
                                                                key: this.spec.postgresUserPassword.key,
                                                            },
                                                        },
                                                    }
                                                    : {
                                                        value: "" + this.spec.postgresUserPassword,
                                                    }
                                                : {
                                                    value: "postgres",
                                                })),
                                        ],
                                        imagePullPolicy: "Always",
                                        ports: [
                                            {
                                                name: "pg-replica",
                                                containerPort: 5432,
                                            },
                                        ],
                                        command: [
                                            "/bin/bash",
                                            "-ec",
                                            "\n                            echo Configuring Replica...\n\n                            echo Checking if standby signal exists...\n                            if [ ! -f /var/lib/postgresql/data/standby.signal ]; then\n                                echo Signal not found. Cleaning up...\n                                rm -rf /var/lib/postgresql/data/*\n                                rm -rf /var/lib/postgresql/log/*\n                                echo Proceeding to base backup from master...\n                                pg_basebackup -h " + this.metadata.name + " -U " + replicationCredentials.user + " -p 5432 -D /var/lib/postgresql/data -Fp -Xs -P -R\n                            fi\n\n                            echo Done.\n\n                            chown -R postgres:postgres /var/lib/postgresql/data\n                            chown -R postgres:postgres /var/lib/postgresql/log\n                            chmod 700 -R /var/lib/postgresql/data\n                            chmod 700 -R /var/lib/postgresql/log\n                            sed -i -r -e \"s/^postgres:(.*):\\/sbin\\/nologin$/postgres:\\1:\\/bin\\/sh/\" /etc/passwd\n                            su postgres -c \"postgres " + replicaStringOptions + "\"\n                          ",
                                        ],
                                        volumeMounts: [
                                            {
                                                mountPath: "/var/lib/postgresql/data",
                                                name: "data",
                                                subPath: "data",
                                            },
                                            {
                                                mountPath: "/dev/shm",
                                                name: "shm",
                                            },
                                            {
                                                mountPath: "/var/lib/postgresql/log",
                                                name: "logs",
                                            },
                                        ],
                                        resources: {
                                            limits: {
                                                cpu: this.spec.cpu.limit,
                                                memory: this.spec.memory,
                                            },
                                            requests: {
                                                cpu: this.spec.cpu.request,
                                                memory: this.spec.memory,
                                            },
                                        },
                                        readinessProbe: {
                                            exec: {
                                                command: [
                                                    "psql",
                                                    "-h",
                                                    "127.0.0.1",
                                                    "-U",
                                                    "postgres",
                                                    "-c",
                                                    "SELECT 1",
                                                ],
                                            },
                                            failureThreshold: 1,
                                            periodSeconds: 3,
                                        },
                                        livenessProbe: {
                                            exec: {
                                                command: [
                                                    "psql",
                                                    "-h",
                                                    "127.0.0.1",
                                                    "-U",
                                                    "postgres",
                                                    "-c",
                                                    "SELECT 1",
                                                ],
                                            },
                                            failureThreshold: 2,
                                            periodSeconds: 5,
                                            initialDelaySeconds: 10,
                                        },
                                    },
                                    {
                                        name: "pg-monitor",
                                        image: "bash:5.0.18",
                                        imagePullPolicy: "Always",
                                        env: [],
                                        command: [
                                            "/usr/local/bin/bash",
                                            "-ec",
                                            "\n                          while true; do\n                            FILES=$(ls /var/lib/postgresql/log)\n                            for file in $FILES\n                            do\n                              echo Analyzing $file\n                              if grep \"requested WAL segment.*has already been removed\" /var/lib/postgresql/log/$file; then\n                                echo Replica is too far behind. Cleaning up...\n                                rm -rf /var/lib/postgresql/data/*\n                                rm -rf /var/lib/postgresql/log/*\n                                exit 1\n                              fi\n                            done\n                            sleep 30\n                          done\n                        ",
                                        ],
                                        resources: {
                                            limits: {
                                                cpu: "100m",
                                                memory: "32Mi",
                                            },
                                            requests: {
                                                cpu: 0,
                                                memory: "16Mi",
                                            },
                                        },
                                        volumeMounts: [
                                            {
                                                mountPath: "/var/lib/postgresql/log",
                                                name: "logs",
                                            },
                                            {
                                                mountPath: "/var/lib/postgresql/data",
                                                name: "data",
                                                subPath: "data",
                                            },
                                        ],
                                    },
                                ],
                                volumes: [
                                    {
                                        name: "shm",
                                        emptyDir: {
                                            medium: "Memory",
                                        },
                                    },
                                    {
                                        name: "logs",
                                        emptyDir: {},
                                    },
                                ],
                            },
                        },
                        volumeClaimTemplates: [
                            {
                                metadata: {
                                    name: "data",
                                },
                                spec: {
                                    accessModes: ["ReadWriteOnce"],
                                    resources: {
                                        requests: {
                                            storage: "2Gi",
                                        },
                                    },
                                    storageClassName: (_r = this.spec.storageClassName) !== null && _r !== void 0 ? _r : "ssd",
                                },
                            },
                        ],
                    }),
                ]
                : [])));
        },
        enumerable: false,
        configurable: true
    });
    return Postgres;
}());
exports.Postgres = Postgres;
