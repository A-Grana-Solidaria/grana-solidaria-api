"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StaticSite = void 0;
var url_1 = require("url");
var helpers_1 = require("./helpers");
var kubernetes_1 = require("./kubernetes");
var StaticSite = /** @class */ (function () {
    function StaticSite(metadata, spec) {
        this.metadata = metadata;
        this.spec = spec;
    }
    Object.defineProperty(StaticSite.prototype, "yaml", {
        get: function () {
            var _a, _b, _c, _d, _e;
            var _f = new url_1.URL(this.spec.publicUrl), hostname = _f.hostname, pathname = _f.pathname;
            var providerName = this.spec.provider === "s3" ? "amazon-s3" : "google-cloud-storage";
            var providerEndpoint = this.spec.provider === "s3"
                ? "s3.amazonaws.com"
                : "storage.googleapis.com";
            var annotations = (_a = this.metadata.annotations) !== null && _a !== void 0 ? _a : {};
            if (process.env.CUBOS_DEV_GKE && !process.env.PRODUCTION) {
                annotations["kubernetes.io/ingress.class"] = (_b = this.spec.ingressClass) !== null && _b !== void 0 ? _b : "private";
            }
            return helpers_1.generateYaml([
                new kubernetes_1.Service({
                    name: providerName,
                    namespace: this.metadata.namespace,
                }, {
                    type: "ExternalName",
                    externalName: providerEndpoint,
                }),
                new kubernetes_1.Ingress(__assign(__assign({}, this.metadata), { annotations: __assign(__assign({}, annotations), { "nginx.ingress.kubernetes.io/rewrite-target": "/" + ((_c = this.spec.bucketName) !== null && _c !== void 0 ? _c : hostname) + "/$1", "nginx.ingress.kubernetes.io/upstream-vhost": providerEndpoint, "nginx.ingress.kubernetes.io/configuration-snippet": "\n              proxy_intercept_errors on;\n              error_page 403 = /index.html;\n              " + (this.spec.notFoundRedirect
                            ? "error_page 404 =" + ((_d = this.spec.notFoundStatus) !== null && _d !== void 0 ? _d : "") + " " + this.spec.notFoundRedirect + ";"
                            : "") + "\n              " + ((_e = this.spec.additionalConfigurationSnippet) !== null && _e !== void 0 ? _e : "") + "\n            " }) }), {
                    tls: [{ secretName: this.spec.tlsCert }],
                    rules: [
                        {
                            host: hostname,
                            http: {
                                paths: [
                                    {
                                        path: pathname + "?(.*)",
                                        backend: {
                                            serviceName: providerName,
                                            servicePort: 80,
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                }),
            ]);
        },
        enumerable: false,
        configurable: true
    });
    return StaticSite;
}());
exports.StaticSite = StaticSite;
