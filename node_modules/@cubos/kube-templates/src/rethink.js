"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rethink = void 0;
var helpers_1 = require("./helpers");
var kubernetes_1 = require("./kubernetes");
var Rethink = /** @class */ (function () {
    function Rethink(metadata, spec) {
        this.metadata = metadata;
        this.spec = spec;
    }
    Object.defineProperty(Rethink.prototype, "yaml", {
        get: function () {
            var _this = this;
            var _a, _b, _c, _d;
            return helpers_1.generateYaml(__spreadArrays([
                new kubernetes_1.Service(this.metadata, {
                    selector: {
                        app: this.metadata.name,
                    },
                    ports: [
                        {
                            name: "client",
                            port: 28015,
                        },
                        {
                            name: "webui",
                            port: 8080,
                        },
                    ],
                })
            ], new Array((_a = this.spec.replicas) !== null && _a !== void 0 ? _a : 1).fill(0).map(function (_, idx) {
                return new kubernetes_1.Service(__assign(__assign({}, _this.metadata), { name: _this.metadata.name + "-" + idx }), {
                    selector: {
                        app: _this.metadata.name,
                        "statefulset.kubernetes.io/pod-name": _this.metadata.name + "-" + idx,
                    },
                    ports: [
                        {
                            name: "cluster",
                            port: 29015,
                        },
                        {
                            name: "client",
                            port: 28015,
                        },
                        {
                            name: "webui",
                            port: 8080,
                        },
                    ],
                });
            }), [
                new kubernetes_1.StatefulSet(this.metadata, {
                    serviceName: this.metadata.name,
                    replicas: (_b = this.spec.replicas) !== null && _b !== void 0 ? _b : 1,
                    selector: {
                        matchLabels: {
                            app: this.metadata.name,
                        },
                    },
                    template: {
                        metadata: {
                            labels: {
                                app: this.metadata.name,
                            },
                        },
                        spec: {
                            automountServiceAccountToken: false,
                            initContainers: [
                                {
                                    name: "create",
                                    image: "rethinkdb:" + this.spec.version,
                                    imagePullPolicy: "Always",
                                    command: [
                                        "bash",
                                        "-ec",
                                        "rethinkdb create -d /data/rethinkdb --server-name " + this.metadata.namespace
                                            .toLowerCase()
                                            .replace(/[^a-z]/gu, "_") + "_$(hostname | cut -d- -f2) || true",
                                    ],
                                    volumeMounts: [
                                        {
                                            mountPath: "/data",
                                            name: "data",
                                        },
                                    ],
                                },
                            ],
                            containers: [
                                {
                                    name: "rethinkdb",
                                    image: "rethinkdb:" + this.spec.version,
                                    imagePullPolicy: "Always",
                                    command: [
                                        "bash",
                                        "-ec",
                                        "touch /data/rethinkdb/log_file; tail -f /data/rethinkdb/log_file & rethinkdb serve " +
                                            "--bind all " +
                                            (this.spec.cacheMb
                                                ? "--cache-size " + this.spec.cacheMb + " "
                                                : "") +
                                            "--directory /data/rethinkdb " +
                                            ("$(echo \"--join " + this.metadata.name + "-\"{0.." + (((_c = this.spec.replicas) !== null && _c !== void 0 ? _c : 1) - 1) + "} | sed \"s/--join $(hostname)//\") ") +
                                            "--canonical-address $(hostname)",
                                    ],
                                    ports: [
                                        {
                                            name: "cluster",
                                            containerPort: 29015,
                                        },
                                        {
                                            name: "client",
                                            containerPort: 28015,
                                        },
                                        {
                                            name: "webui",
                                            containerPort: 8080,
                                        },
                                    ],
                                    volumeMounts: [
                                        {
                                            mountPath: "/data",
                                            name: "data",
                                        },
                                    ],
                                    resources: {
                                        limits: {
                                            cpu: this.spec.cpu.limit,
                                            memory: this.spec.memory,
                                        },
                                        requests: {
                                            cpu: this.spec.cpu.request,
                                            memory: this.spec.memory,
                                        },
                                    },
                                    readinessProbe: {
                                        httpGet: {
                                            path: "/",
                                            port: 8080,
                                        },
                                        failureThreshold: 1,
                                        periodSeconds: 3,
                                    },
                                    livenessProbe: {
                                        httpGet: {
                                            path: "/",
                                            port: 8080,
                                        },
                                        failureThreshold: 2,
                                        periodSeconds: 5,
                                        initialDelaySeconds: 10,
                                    },
                                },
                            ],
                        },
                    },
                    volumeClaimTemplates: [
                        {
                            metadata: {
                                name: "data",
                            },
                            spec: {
                                accessModes: ["ReadWriteOnce"],
                                resources: {
                                    requests: {
                                        storage: "2Gi",
                                    },
                                },
                                storageClassName: (_d = this.spec.storageClassName) !== null && _d !== void 0 ? _d : "ssd",
                            },
                        },
                    ],
                }),
            ]));
        },
        enumerable: false,
        configurable: true
    });
    return Rethink;
}());
exports.Rethink = Rethink;
