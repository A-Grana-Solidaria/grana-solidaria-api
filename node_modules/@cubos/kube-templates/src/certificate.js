"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Certificate = void 0;
var certmanager_1 = require("./certmanager");
var helpers_1 = require("./helpers");
var kubernetes_1 = require("./kubernetes");
var Certificate = /** @class */ (function () {
    function Certificate(metadata, spec) {
        this.metadata = metadata;
        this.spec = spec;
    }
    Object.defineProperty(Certificate.prototype, "yaml", {
        get: function () {
            var _a, _b, _c;
            var domainSlash = this.spec.domain.replace(/\./gu, "-");
            return helpers_1.generateYaml([
                new certmanager_1.CertManagerCertificate(__assign({ name: domainSlash }, this.metadata), __assign({ secretName: "cert-" + domainSlash, commonName: this.spec.domain, issuerRef: {
                        name: "letsencrypt",
                        kind: "ClusterIssuer",
                    } }, (((_a = this.spec.challengeType) !== null && _a !== void 0 ? _a : "dns") === "dns"
                    ? {
                        dnsNames: [this.spec.domain, "*." + this.spec.domain],
                        acme: {
                            config: [
                                {
                                    dns01: {
                                        provider: (_b = this.spec.provider) !== null && _b !== void 0 ? _b : "cloudflare",
                                    },
                                    domains: [this.spec.domain, "*." + this.spec.domain],
                                },
                            ],
                        },
                    }
                    : {
                        dnsNames: [this.spec.domain],
                        acme: {
                            config: [
                                {
                                    http01: {},
                                    domains: [this.spec.domain],
                                },
                            ],
                        },
                    }))),
                new kubernetes_1.Secret(__assign(__assign({}, this.metadata), { name: "cert-" + domainSlash, annotations: __assign(__assign({}, ((_c = this.metadata.annotations) !== null && _c !== void 0 ? _c : {})), (this.spec.replicationAllowedNamespaces
                        ? {
                            "replicator.v1.mittwald.de/replication-allowed": "true",
                            "replicator.v1.mittwald.de/replication-allowed-namespaces": this
                                .spec.replicationAllowedNamespaces.source,
                        }
                        : {})) })),
            ]);
        },
        enumerable: false,
        configurable: true
    });
    return Certificate;
}());
exports.Certificate = Certificate;
