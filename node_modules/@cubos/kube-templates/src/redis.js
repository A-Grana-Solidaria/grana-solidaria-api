"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Redis = void 0;
var helpers_1 = require("./helpers");
var kubernetes_1 = require("./kubernetes");
var Redis = /** @class */ (function () {
    function Redis(metadata, spec) {
        this.metadata = metadata;
        this.spec = spec;
    }
    Object.defineProperty(Redis.prototype, "yaml", {
        get: function () {
            var _a;
            return helpers_1.generateYaml([
                new kubernetes_1.Service(this.metadata, {
                    selector: {
                        app: this.metadata.name,
                    },
                    ports: [
                        {
                            name: "redis",
                            port: 6379,
                        },
                    ],
                }),
                new kubernetes_1.StatefulSet(this.metadata, {
                    serviceName: this.metadata.name,
                    replicas: 1,
                    selector: {
                        matchLabels: {
                            app: this.metadata.name,
                        },
                    },
                    template: {
                        metadata: {
                            labels: {
                                app: this.metadata.name,
                            },
                        },
                        spec: {
                            automountServiceAccountToken: false,
                            containers: [
                                {
                                    name: "redis",
                                    image: "redis:" + this.spec.version,
                                    imagePullPolicy: "Always",
                                    args: __spreadArrays([
                                        "redis-server"
                                    ], Object.entries((_a = this.spec.options) !== null && _a !== void 0 ? _a : {})
                                        .map(function (_a) {
                                        var key = _a[0], value = _a[1];
                                        return [
                                            "--" + key.replace(/[A-Z]/g, function (x) { return "-" + x.toLowerCase(); }),
                                            "" + (value === true ? "yes" : value === false ? "no" : value),
                                        ];
                                    })
                                        .reduce(function (a, b) { return __spreadArrays(a, b); }, [])),
                                    ports: [
                                        {
                                            name: "redis",
                                            containerPort: 6379,
                                        },
                                    ],
                                    resources: {
                                        limits: {
                                            cpu: this.spec.cpu.limit,
                                            memory: this.spec.memory,
                                        },
                                        requests: {
                                            cpu: this.spec.cpu.request,
                                            memory: this.spec.memory,
                                        },
                                    },
                                    readinessProbe: {
                                        exec: {
                                            command: ["redis-cli", "ping"],
                                        },
                                        failureThreshold: 1,
                                        periodSeconds: 3,
                                    },
                                    livenessProbe: {
                                        exec: {
                                            command: ["redis-cli", "ping"],
                                        },
                                        failureThreshold: 2,
                                        periodSeconds: 5,
                                        initialDelaySeconds: 10,
                                    },
                                },
                            ],
                        },
                    },
                    volumeClaimTemplates: [],
                }),
            ]);
        },
        enumerable: false,
        configurable: true
    });
    return Redis;
}());
exports.Redis = Redis;
