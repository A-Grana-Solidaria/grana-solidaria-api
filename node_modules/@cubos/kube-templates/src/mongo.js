"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Mongo = void 0;
var helpers_1 = require("./helpers");
var _ = __importStar(require("lodash"));
var kubernetes_1 = require("./kubernetes");
var Mongo = /** @class */ (function () {
    function Mongo(metadata, spec) {
        this.metadata = metadata;
        this.spec = spec;
    }
    Object.defineProperty(Mongo.prototype, "yaml", {
        get: function () {
            var _a, _b;
            return helpers_1.generateYaml([
                new kubernetes_1.Service(_.merge(this.metadata, this.spec.serviceMetadata), {
                    selector: {
                        app: this.metadata.name,
                    },
                    type: (_a = this.spec.serviceType) !== null && _a !== void 0 ? _a : "ClusterIP",
                    ports: [
                        {
                            name: "mongo",
                            port: 27017,
                        },
                    ],
                }),
                new kubernetes_1.StatefulSet(this.metadata, {
                    serviceName: this.metadata.name,
                    replicas: 1,
                    selector: {
                        matchLabels: {
                            app: this.metadata.name,
                        },
                    },
                    template: {
                        metadata: {
                            labels: {
                                app: this.metadata.name,
                            },
                        },
                        spec: {
                            automountServiceAccountToken: false,
                            volumes: [
                                {
                                    name: "config",
                                    emptyDir: {},
                                },
                            ],
                            initContainers: this.spec.auth && [
                                {
                                    name: "setup",
                                    image: "mongo:" + this.spec.version,
                                    imagePullPolicy: "Always",
                                    command: [
                                        "bash",
                                        "-ec",
                                        "\n                    mongod &\n                    pid=$!\n\n                    echo Wait for Mongo to be ready.\n                    until mongo --eval \"db.adminCommand('ping')\"\n                    do\n                    echo Not ready yet. Trying again...\n                    sleep 1\n                    done\n                    echo Mongo is ready.\n\n                    mongo --eval \"db.getSiblingDB('admin').dropAllUsers()\"\n                    mongo --eval \"db.getSiblingDB('admin').createUser({ user: '" + this.spec.auth.username + "', pwd: '" + this.spec.auth.password + "', roles: [{ role: 'root', db: 'admin' }] })\"\n\n                    kill -TERM $pid\n                    wait $pid\n                  ",
                                    ],
                                    volumeMounts: [
                                        {
                                            mountPath: "/data/db",
                                            name: "datadir",
                                        },
                                        {
                                            mountPath: "/data/configdb",
                                            name: "config",
                                        },
                                    ],
                                },
                            ],
                            containers: [
                                {
                                    name: "mongo",
                                    image: "mongo:" + this.spec.version,
                                    imagePullPolicy: "Always",
                                    args: __spreadArrays([
                                        "mongod",
                                        "--bind_ip=0.0.0.0"
                                    ], (this.spec.auth ? ["--auth"] : [])),
                                    ports: [
                                        {
                                            name: "mongo",
                                            containerPort: 27017,
                                        },
                                    ],
                                    volumeMounts: [
                                        {
                                            mountPath: "/data/db",
                                            name: "datadir",
                                        },
                                        {
                                            mountPath: "/data/configdb",
                                            name: "config",
                                        },
                                    ],
                                    resources: {
                                        limits: {
                                            cpu: this.spec.cpu.limit,
                                            memory: this.spec.memory,
                                        },
                                        requests: {
                                            cpu: this.spec.cpu.request,
                                            memory: this.spec.memory,
                                        },
                                    },
                                    readinessProbe: {
                                        exec: {
                                            command: ["mongo", "--eval", "db.adminCommand('ping')"],
                                        },
                                        failureThreshold: 1,
                                        periodSeconds: 3,
                                    },
                                    livenessProbe: {
                                        exec: {
                                            command: ["mongo", "--eval", "db.adminCommand('ping')"],
                                        },
                                        failureThreshold: 2,
                                        periodSeconds: 5,
                                        initialDelaySeconds: 10,
                                    },
                                },
                            ],
                        },
                    },
                    volumeClaimTemplates: [
                        {
                            metadata: {
                                name: "datadir",
                            },
                            spec: {
                                accessModes: ["ReadWriteOnce"],
                                resources: {
                                    requests: {
                                        storage: "2Gi",
                                    },
                                },
                                storageClassName: (_b = this.spec.storageClassName) !== null && _b !== void 0 ? _b : "ssd",
                            },
                        },
                    ],
                }),
            ]);
        },
        enumerable: false,
        configurable: true
    });
    return Mongo;
}());
exports.Mongo = Mongo;
