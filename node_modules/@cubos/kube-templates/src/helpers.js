"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseMemory = exports.clone = exports.env = exports.generateYaml = void 0;
var js_yaml_1 = require("js-yaml");
function generateYaml(objects) {
    return objects
        .map(function (obj) {
        if ("yaml" in obj) {
            return obj.yaml;
        }
        obj = stripUndefinedProperties(obj);
        return ("---\n" +
            js_yaml_1.safeDump(obj, {
                noRefs: true,
                sortKeys: true,
                noArrayIndent: true,
            }));
    })
        .join("\n");
}
exports.generateYaml = generateYaml;
function stripUndefinedProperties(obj) {
    if (Array.isArray(obj)) {
        return obj.map(stripUndefinedProperties);
    }
    else if (typeof obj === "object" && obj) {
        var newObj = {};
        for (var _i = 0, _a = Object.keys(obj); _i < _a.length; _i++) {
            var prop = _a[_i];
            var value = obj[prop];
            if (value === undefined)
                continue;
            if (Array.isArray(value) && value.length === 0)
                continue;
            newObj[prop] = stripUndefinedProperties(value);
        }
        return newObj;
    }
    return obj;
}
exports.env = new Proxy(process.env, {
    get: function (envObj, prop) {
        if (!(prop in envObj)) {
            throw new Error("Environment variable " + String(prop) + " not defined");
        }
        return envObj[String(prop)];
    },
});
function clone(obj) {
    return JSON.parse(JSON.stringify(obj));
}
exports.clone = clone;
function parseMemory(memory) {
    if (typeof memory === "number")
        return memory;
    var str = memory
        .replace(/\s/gu, "")
        .replace(/e(\d+)$/, function (n) { return new Array(n).fill("0").join(""); });
    var i = 0;
    for (var _i = 0, _a = ["K", "M", "G", "T", "P", "E"]; _i < _a.length; _i++) {
        var letter = _a[_i];
        i += 1;
        var match = str.match(new RegExp("^(\\d+)" + letter + "(i?)$", "i"));
        if (match) {
            var base = parseInt(match[1], 10);
            var multiplier = Math.pow(match[2] ? 1024 : 1000, i);
            return base * multiplier;
        }
    }
    throw new Error("Unrecognized memory format: '" + memory + "'");
}
exports.parseMemory = parseMemory;
