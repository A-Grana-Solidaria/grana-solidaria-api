"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WordPress = void 0;
var url_1 = require("url");
var helpers_1 = require("./helpers");
var kubernetes_1 = require("./kubernetes");
var WordPress = /** @class */ (function () {
    function WordPress(metadata, spec) {
        this.metadata = metadata;
        this.spec = spec;
    }
    Object.defineProperty(WordPress.prototype, "yaml", {
        get: function () {
            var _a;
            var url = this.spec.ingress.publicUrl ? new url_1.URL(this.spec.ingress.publicUrl) : null;
            var maxUploadSize = this.spec.ingress.maxBodySize ? Math.ceil(helpers_1.parseMemory(this.spec.ingress.maxBodySize) / 1024 / 1024) + "M" : "2M";
            var postMaxSize = this.spec.ingress.maxBodySize ? Math.ceil(helpers_1.parseMemory(this.spec.ingress.maxBodySize) / 1024 / 1024) + 8 + "M" : "10M";
            return helpers_1.generateYaml(__spreadArrays([
                new kubernetes_1.Service({
                    name: this.metadata.name,
                    namespace: this.metadata.namespace,
                }, {
                    selector: {
                        app: this.metadata.name,
                    },
                    ports: [
                        {
                            name: "http",
                            port: 80,
                        },
                    ],
                }),
                new kubernetes_1.StatefulSet(this.metadata, {
                    serviceName: this.metadata.name,
                    replicas: 1,
                    selector: {
                        matchLabels: {
                            app: this.metadata.name,
                        },
                    },
                    template: {
                        metadata: {
                            labels: {
                                app: this.metadata.name,
                            },
                        },
                        spec: {
                            automountServiceAccountToken: false,
                            initContainers: [
                                {
                                    name: "wordpress-setup",
                                    image: "wordpress:" + this.spec.version,
                                    command: [
                                        "/bin/bash",
                                        "-ecx",
                                        "cp /usr/local/etc/php/conf.d/* /phpconf/ && echo -e \"post_max_size=" + postMaxSize + "\\nupload_max_filesize=" + maxUploadSize + "\\n\" > /phpconf/custom.ini",
                                    ],
                                    args: [],
                                    resources: {
                                        limits: {
                                            cpu: this.spec.cpu.limit,
                                            memory: this.spec.memory.limit,
                                        },
                                        requests: {
                                            cpu: this.spec.cpu.request,
                                            memory: this.spec.memory.request,
                                        },
                                    },
                                    volumeMounts: [
                                        {
                                            name: "php-config",
                                            mountPath: "/phpconf",
                                        },
                                    ],
                                },
                            ],
                            containers: [
                                {
                                    name: "wordpress",
                                    image: "wordpress:" + this.spec.version,
                                    env: __spreadArrays([
                                        {
                                            name: "WORDPRESS_DB_HOST",
                                            value: this.spec.database.host,
                                        },
                                        {
                                            name: "WORDPRESS_DB_USER",
                                            value: this.spec.database.username,
                                        },
                                        {
                                            name: "WORDPRESS_DB_NAME",
                                            value: (_a = this.spec.database.name) !== null && _a !== void 0 ? _a : "wordpress",
                                        }
                                    ], (this.spec.database.password
                                        ? [
                                            {
                                                name: "WORDPRESS_DB_PASSWORD",
                                                value: this.spec.database.password,
                                            },
                                        ]
                                        : [])),
                                    imagePullPolicy: "IfNotPresent",
                                    ports: [
                                        {
                                            name: "http",
                                            containerPort: 80,
                                        },
                                    ],
                                    volumeMounts: [
                                        {
                                            mountPath: "/var/www/html",
                                            name: "data",
                                            subPath: "www",
                                        },
                                        {
                                            mountPath: "/usr/local/etc/php/conf.d",
                                            name: "php-config",
                                        },
                                    ],
                                    resources: {
                                        limits: {
                                            cpu: this.spec.cpu.limit,
                                            memory: this.spec.memory.limit,
                                        },
                                        requests: {
                                            cpu: this.spec.cpu.request,
                                            memory: this.spec.memory.request,
                                        },
                                    },
                                    readinessProbe: {
                                        httpGet: {
                                            path: "/wp-includes/images/blank.gif",
                                            port: 80,
                                        },
                                        initialDelaySeconds: 5,
                                        failureThreshold: 1,
                                        periodSeconds: 3,
                                    },
                                    livenessProbe: {
                                        httpGet: {
                                            path: "/wp-includes/images/blank.gif",
                                            port: 80,
                                        },
                                        initialDelaySeconds: 5,
                                        failureThreshold: 2,
                                        periodSeconds: 5,
                                    },
                                },
                            ],
                            volumes: [
                                {
                                    name: "php-config",
                                    emptyDir: {},
                                },
                            ],
                        },
                    },
                    volumeClaimTemplates: [
                        {
                            metadata: {
                                name: "data",
                            },
                            spec: {
                                accessModes: ["ReadWriteOnce"],
                                resources: {
                                    requests: {
                                        storage: "1Gi",
                                    },
                                },
                                storageClassName: process.env.PRODUCTION ? "ssd-regional" : "standard",
                            },
                        },
                    ],
                })
            ], (url
                ? [
                    new kubernetes_1.Ingress({
                        name: this.metadata.name,
                        namespace: this.metadata.namespace,
                        annotations: __assign(__assign({}, (this.spec.ingress.maxBodySize
                            ? {
                                "nginx.ingress.kubernetes.io/proxy-body-size": helpers_1.parseMemory(this.spec.ingress.maxBodySize).toString(),
                            }
                            : {})), (this.spec.ingress.timeout
                            ? {
                                "nginx.ingress.kubernetes.io/proxy-read-timeout": this.spec.ingress.timeout.toString(),
                            }
                            : {})),
                    }, {
                        tls: this.spec.ingress.tlsCert
                            ? [
                                {
                                    secretName: this.spec.ingress.tlsCert,
                                },
                            ]
                            : [],
                        rules: [
                            {
                                host: url.hostname,
                                http: {
                                    paths: [
                                        {
                                            path: url.pathname,
                                            backend: {
                                                serviceName: this.metadata.name,
                                                servicePort: 80,
                                            },
                                        },
                                    ],
                                },
                            },
                        ],
                    }),
                ]
                : [])));
        },
        enumerable: false,
        configurable: true
    });
    return WordPress;
}());
exports.WordPress = WordPress;
