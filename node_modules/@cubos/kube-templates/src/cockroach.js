"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cockroach = void 0;
var helpers_1 = require("./helpers");
var _ = __importStar(require("lodash"));
var kubernetes_1 = require("./kubernetes");
var Cockroach = /** @class */ (function () {
    function Cockroach(metadata, spec) {
        this.metadata = metadata;
        this.spec = spec;
    }
    Object.defineProperty(Cockroach.prototype, "yaml", {
        get: function () {
            var _this = this;
            return helpers_1.generateYaml([
                new kubernetes_1.Service(__assign(__assign({}, this.metadata), { name: this.metadata.name + "-public", labels: {
                        "app": this.metadata.name
                    } }), {
                    selector: {
                        app: this.metadata.name,
                    },
                    ports: [
                        {
                            name: "grpc",
                            port: 26257,
                            targetPort: 26257
                        },
                        {
                            name: "http",
                            port: 8080,
                            targetPort: 8080
                        }
                    ]
                }),
                new kubernetes_1.Service(__assign(__assign({}, this.metadata), { labels: {
                        "app": this.metadata.name
                    }, annotations: {
                        "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true",
                        "prometheus.io/scrape": "true",
                        "prometheus.io/path": "_status/vars",
                        "prometheus.io/port": "8080"
                    } }), {
                    selector: {
                        app: this.metadata.name,
                    },
                    ports: [
                        {
                            name: "grpc",
                            port: 26257,
                            targetPort: 26257
                        },
                        {
                            name: "http",
                            port: 8080,
                            targetPort: 8080
                        }
                    ],
                    publishNotReadyAddresses: true,
                    clusterIP: "None"
                }),
                new kubernetes_1.PodDisruptionBudget(__assign(__assign({}, this.metadata), { name: this.metadata.name + "-budget", labels: {
                        "app": this.metadata.name
                    } }), {
                    selector: {
                        matchLabels: {
                            "app": this.metadata.name
                        },
                    },
                    maxUnavailable: 1
                }),
                new kubernetes_1.StatefulSet(this.metadata, {
                    serviceName: this.metadata.name,
                    replicas: this.spec.replicas,
                    selector: {
                        matchLabels: {
                            app: this.metadata.name,
                        }
                    },
                    template: {
                        metadata: {
                            labels: {
                                app: this.metadata.name,
                            }
                        },
                        spec: {
                            affinity: {
                                podAntiAffinity: {
                                    preferredDuringSchedulingIgnoredDuringExecution: [
                                        {
                                            weight: 100,
                                            podAffinityTerm: {
                                                labelSelector: {
                                                    matchExpressions: [
                                                        {
                                                            key: "app",
                                                            operator: "In",
                                                            values: [this.metadata.name]
                                                        }
                                                    ]
                                                },
                                                topologyKey: "kubernetes.io/hostname"
                                            }
                                        }
                                    ],
                                }
                            },
                            containers: [
                                {
                                    name: this.metadata.name,
                                    image: "cockroachdb/cockroach:v" + this.spec.version,
                                    imagePullPolicy: "IfNotPresent",
                                    ports: [
                                        {
                                            name: "grpc",
                                            containerPort: 26257,
                                        },
                                        {
                                            name: "http",
                                            containerPort: 8080,
                                        }
                                    ],
                                    livenessProbe: {
                                        httpGet: {
                                            path: "/health",
                                            port: 8080
                                        },
                                        initialDelaySeconds: 30,
                                        periodSeconds: 5
                                    },
                                    readinessProbe: {
                                        httpGet: {
                                            path: "/health?ready=1",
                                            port: 8080
                                        },
                                        initialDelaySeconds: 10,
                                        periodSeconds: 5,
                                        failureThreshold: 2
                                    },
                                    volumeMounts: [
                                        {
                                            mountPath: "/cockroach/cockroach-data",
                                            name: "datadir"
                                        }
                                    ],
                                    env: [
                                        {
                                            name: "COCKROACH_CHANNEL",
                                            value: "kubernetes-insecure"
                                        },
                                        {
                                            name: "GOMAXPROCS",
                                            valueFrom: {
                                                resourceFieldRef: {
                                                    resource: "limits.cpu",
                                                    divisor: "1"
                                                }
                                            }
                                        },
                                        {
                                            name: "MEMORY_LIMIT_MIB",
                                            valueFrom: {
                                                resourceFieldRef: {
                                                    resource: "limits.memory",
                                                    divisor: "1Mi"
                                                }
                                            }
                                        }
                                    ],
                                    command: [
                                        "/bin/bash",
                                        "-ecx",
                                        "exec /cockroach/cockroach start --logtostderr --insecure --advertise-host $(hostname -f) --http-addr 0.0.0.0 --join " + _.range(this.spec.replicas).map(function (i) { return _this.metadata.name + "-" + i + "." + _this.metadata.name; }).join(",") + " --cache $(expr $MEMORY_LIMIT_MIB / 4)MiB"
                                    ],
                                    resources: {
                                        limits: {
                                            cpu: this.spec.cpu.limit,
                                            memory: this.spec.memory,
                                        },
                                        requests: {
                                            cpu: this.spec.cpu.request,
                                            memory: this.spec.memory,
                                        },
                                    }
                                },
                            ],
                            terminationGracePeriodSeconds: 60,
                            volumes: [
                                {
                                    name: "datadir",
                                    persistentVolumeClaim: {
                                        claimName: "datadir"
                                    }
                                }
                            ]
                        },
                    },
                    podManagementPolicy: "Parallel",
                    updateStrategy: {
                        type: "RollingUpdate"
                    },
                    volumeClaimTemplates: [
                        {
                            metadata: {
                                name: "datadir",
                            },
                            spec: {
                                accessModes: ["ReadWriteOnce"],
                                resources: {
                                    requests: {
                                        storage: "2Gi",
                                    },
                                },
                                storageClassName: "ssd",
                            },
                        },
                    ]
                }),
                new kubernetes_1.Job(__assign(__assign({}, this.metadata), { name: this.metadata.name != "cockroachdb" ? this.metadata.name + "-cluster-init" : "cluster-init" }), {
                    template: {
                        spec: {
                            containers: [
                                {
                                    name: this.metadata.name != "cockroachdb" ? this.metadata.name + "-cluster-init" : "cluster-init",
                                    image: "cockroachdb/cockroach:v" + this.spec.version,
                                    imagePullPolicy: "IfNotPresent",
                                    command: [
                                        "/cockroach/cockroach",
                                        "init",
                                        "--insecure",
                                        "--host=" + this.metadata.name + "-0." + this.metadata.name
                                    ]
                                }
                            ],
                            restartPolicy: "OnFailure"
                        },
                    },
                })
            ]);
        },
        enumerable: false,
        configurable: true
    });
    return Cockroach;
}());
exports.Cockroach = Cockroach;
