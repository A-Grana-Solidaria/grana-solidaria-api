import { ObjectMeta } from "./kubernetes";
interface CertificateSpec {
    acme: ACMECertificateConfig;
    commonName?: string;
    dnsNames?: string[];
    duration?: string;
    ipAddresses?: string[];
    isCA?: boolean;
    issuerRef?: ObjectReference;
    keyAlgorithm?: "rsa" | "ecdsa";
    keyEncoding?: "pkcs1" | "pkcs8";
    keySize?: number;
    organization?: string[];
    renewBefore?: string;
    secretName: string;
    usages?: string[];
}
interface ObjectReference {
    group?: string;
    kind: string;
    name: string;
}
interface ACMECertificateConfig {
    config: DomainSolverConfig[];
}
declare type DomainSolverConfig = ({
    dns01: DNS01SolverConfig;
} | {
    http01: HTTP01SolverConfig;
}) & {
    domains: string[];
};
interface DNS01SolverConfig {
    provider: string;
}
declare type HTTP01SolverConfig = {
    ingress: string;
} | {
    ingressClass: string;
} | {};
export declare class CertManagerCertificate {
    metadata: ObjectMeta;
    spec: CertificateSpec;
    constructor(metadata: ObjectMeta, spec: CertificateSpec);
    get yaml(): string;
}
export {};
