"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var child_process_1 = require("child_process");
var fs_1 = require("fs");
var helpers_1 = require("./helpers");
function kind() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var result = child_process_1.spawnSync("kind", args);
    if (result.status === 0) {
        return result.stdout.toString().trim();
    }
    else {
        throw new Error(result.stderr.toString().trim());
    }
}
var clusters = kind("get", "clusters").split("\n");
var clusterName = "kube-templates-test";
if (process.env.CI) {
    for (var _i = 0, clusters_1 = clusters; _i < clusters_1.length; _i++) {
        var cluster = clusters_1[_i];
        if (!cluster.startsWith(clusterName + "-"))
            continue;
        var date = parseInt(cluster.substr(clusterName.length + 1), 10);
        if (date < new Date().getTime() - 3600000) {
            kind("delete", "cluster", "--name", cluster);
        }
    }
    clusterName += "-" + new Date().getTime();
    kind("create", "cluster", "--name", clusterName, "--wait", "2m");
    console.log(kind("get", "clusters"));
    var kubeconfig = kind("get", "kubeconfig", "--name", clusterName);
    var masterIp = child_process_1.spawnSync("docker", [
        "inspect",
        "-f",
        "{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}",
        clusterName + "-control-plane",
    ])
        .stdout.toString()
        .trim();
    fs_1.writeFileSync(".test-kubeconfig", kubeconfig.replace(/127\.0\.0\.1:\d+/g, masterIp + ":6443"));
}
else {
    if (!clusters.includes(clusterName)) {
        kind("create", "cluster", "--name", clusterName, "--wait", "1m");
        clusters.push(clusterName);
    }
    fs_1.writeFileSync(".test-kubeconfig", kind("get", "kubeconfig", "--name", clusterName));
}
var storageClasses = helpers_1.kubectl("get", "storageclasses");
var storageClassesToCreate = ["ssd-regional", "ssd"];
var base = JSON.parse(storageClasses.items.find(function (x) { return x.metadata.name === "standard"; }).metadata
    .annotations["kubectl.kubernetes.io/last-applied-configuration"]);
delete base.metadata.annotations["storageclass.kubernetes.io/is-default-class"];
var _loop_1 = function (name) {
    if (storageClasses.items.find(function (x) { return x.metadata.name === name; }))
        return "continue";
    base.metadata.name = name;
    helpers_1.apply({ yaml: JSON.stringify(base) });
};
for (var _a = 0, storageClassesToCreate_1 = storageClassesToCreate; _a < storageClassesToCreate_1.length; _a++) {
    var name = storageClassesToCreate_1[_a];
    _loop_1(name);
}
